CROSS_COMPILE?=mipsel-linux-
ARCH_FLAGS?=-march=mips64r2
CFLAGS =  -O2 -fno-common $(ARCH_FLAGS) $(EXTRA_CFLAGS)
ifdef HAVE_FLOAT
CFLAGS := -DHAVE_FLOAT -DFLOATINGPT $(CFLAGS)
endif
export CROSS_COMPILE
CC = $(CROSS_COMPILE)gcc
LD = $(CROSS_COMPILE)ld
AR = $(CROSS_COMPILE)ar
OBJCOPY = $(CROSS_COMPILE)objcopy


try-run = $(shell set -e;		\
	TMP="$(TMPOUT).$$$$.tmp";	\
	if ($(1)) >/dev/null 2>&1;	\
	then echo "$(2)";		\
	else echo "$(3)";		\
	fi;				\
	rm -f "$$TMP")


# cc-option
# Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)

cc-option = $(call try-run,\
	$(CC) -march=mips64r2 $(1) -c -xc /dev/null -o "$$TMP",$(1),$(2))

comma   := ,


# Default sed regexp - multiline due to syntax constraints
define sed-y
	"/^->/{s:->#\(.*\):/* \1 */:; \
	s:^->\([^ ]*\) [\$$#]*\([-0-9]*\) \(.*\):#define \1 \2 /* \3 */:; \
	s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
	s:->::; p;}"
endef

quiet_cmd_offsets = GEN     $@
define cmd_offsets
	(set -e; \
	 echo "#ifndef __ASM_OFFSETS_H__"; \
	 echo "#define __ASM_OFFSETS_H__"; \
	 echo "/*"; \
	 echo " * DO NOT MODIFY."; \
	 echo " *"; \
	 echo " * This file was generated by Kbuild"; \
	 echo " *"; \
	 echo " */"; \
	 echo ""; \
	 sed -ne $(sed-y) $<; \
	 echo ""; \
	 echo "#endif" ) > $@
endef


$(src)/include/asm/asm-offsets64.h: $(obj)/asm-offsets.s64
	$(call cmd_offsets)

$(src)/include/asm/asm-offsets32.h: $(obj)/asm-offsets.s
	$(call cmd_offsets)

CFLAGS_NOPIC := $(CFLAGS) -g  -DGUEST -I include -I . -fno-pic -mno-abicalls -nostdinc -nostdlib -fno-builtin -mno-branch-likely -DCPU_COUNT_PER_US=10 -I $(TOPDIR)/include -include common.h

ifdef LOADADDR
ifndef NOFIXUP
CFLAGS := $(call cc-option,-Wa$(comma)-mfix-jrjalr-with-hb -Wa$(comma)--mfix-ls-jump=0xfffff -Wa$(comma)--mfix-ls-jump1=$(LOADADDR) -DFIXUP,) $(CFLAGS)
endif

CFLAGS := -g -DGUEST -fno-pic -mno-abicalls -nostdinc -nostdlib -fno-builtin -mno-branch-likely -DCPU_COUNT_PER_US=10 $(CFLAGS) -I include -I . -I $(TOPDIR)/include -include common.h
affix=-$(LOADADDR)
else
CFLAGS := -g -DGUEST -fpic -mabicalls -nostdinc -nostdlib -fno-builtin -mno-branch-likely -DCPU_COUNT_PER_US=10 $(CFLAGS) -I include -I . -I $(TOPDIR)/include -include common.h
affix=
endif

srcs := $(shell echo *.c|sed 's/\stest[^.]*\.c/ /g' ) test.c
bins := $(patsubst %.c,%.bin$(affix),$(srcs)) $(patsubst %.c,%.bin64$(affix),$(srcs)) $(shell echo *.S|sed 's/bin.lds.S//;s/bin64.lds.S//;s/start.S//;s/start64.S//;'|sed 's/[.]S/.BIN64/g') $(shell echo *.S|sed 's/bin.lds.S//;s/bin64.lds.S//;s/start.S//;s/start64.S//;s/loongson3\S*.S//g;'|sed 's/[.]S/.BIN/g')
elfs := $(patsubst %.c,%.elf,$(srcs))
elf64s := $(patsubst %.c,%.elf64,$(srcs))

allbins: $(bins)
elfs : $(elfs)
elf64s : $(elf64s)

export CFLAGS LOADADDR

basetarget = $(basename $(notdir $@)).o

cmd_lib = make -C $(1) src=$(1)  obj=$(obj)/$(@:.a=)  lib=$(obj)/$@ $(obj)/$(@:.a=) $(obj)/$@
cmd_lib1 = make -C $(1) -f $(2) src=$(1)  obj=$(obj)/$(@:.a=)  lib=$(obj)/$@ $(obj)/$(@:.a=) $(obj)/$@
cmd_c_to_o = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -o $@ -mabi=32 -c $(abspath $<)
cmd1_c_to_o = [ -e $$(dir $$@) ] || mkdir -p $$(dir $$@) && $$(CC) $$(CFLAGS_$$(basetarget)) $$(CFLAGS) -o $$@ -mabi=32 -c $$(abspath $$<)
cmd_c_to_o64 = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -o $@ -c $(abspath $<)  -mabi=64 -DHAVE_QUAD
cmd1_c_to_o64 = [ -e $$(dir $$@) ] || mkdir -p $$(dir $$@) && $$(CC) $$(CFLAGS_$$(basetarget)) $$(CFLAGS) -o $$@ -c $$(abspath $$<)  -mabi=64 -DHAVE_QUAD
cmd_c_to_s = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -S -fverbose-asm -o $@ $(abspath $<) -mabi=32
cmd_c_to_s64 = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -S -fverbose-asm -o $@ -c $(abspath $<)  -mabi=64 -DHAVE_QUAD
cmd_c_to_i = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -o $(@:.o=.i) -mabi=32 -g3 -C -E $(abspath $<)
cmd_c_to_i64 = [ -e $(dir $@) ] || mkdir -p $(dir $@) && $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS) -o $(@:.o64=.i64) -mabi=64 -g3 -C -E $(abspath $<)
cmd_c_to_O = $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS_NOPIC) -o $@ -c $(abspath $<)  -mabi=32
cmd_c_to_O64 = $(CC) $(CFLAGS_$(basetarget)) $(CFLAGS_NOPIC) -o $@ -c $(abspath $<)  -mabi=64 -DHAVE_QUAD
cmd_ar	= $(AR) -cr  $@ $?

libtinyc.a libtinyc64.a: $(TOPDIR)/lib
	$(call cmd_lib,$<)
libm.a libm64.a: $(TOPDIR)/libm
	$(call cmd_lib,$<)

lib%.a lib%64.a: FORCE
	$(call cmd_lib,$(if $(libsrc),$(libsrc),$(src)/$*))

.SUFFIXES: .elf .o64 .elf64 .bin64 .BIN .i .O .O64 .BIN .BIN64 .ELF .BIN64


%.elf:%.o start.o libtinyc.a libm.a bin.lds
	$(LD) --emit-relocs -g -T  bin.lds $(LDFLAGS) -o $@ start.o $<  -L . -ltinyc -lm


%.bin$(affix) %.bin:%.elf
	$(OBJCOPY) -O binary $< $@ 

%.elf64:%.o64 start64.o64 libtinyc64.a libm64.a bin64.lds
	$(LD) --emit-relocs -g -T  bin64.lds $(LDFLAGS) -o $@ start64.o64 $<  -L . -ltinyc64 -lm64


%.bin64$(affix) %.bin64:%.elf64
	$(OBJCOPY) -O binary $< $@ 


%.ELF:%.O  bin.lds
	$(LD) -g -T  bin.lds $(LDFLAGS) -o $@  $< 

%.BIN$(affix):%.ELF
	$(OBJCOPY) -O binary  $< $@

%.ELF64:%.O64  bin64.lds
	$(LD) -g -T  bin64.lds $(LDFLAGS) -o $@  $< 

%.BIN64$(affix):%.ELF64
	$(OBJCOPY) -O binary  $< $@

bin.lds: $(TOPDIR)/bin.lds.S
	$(CC) -Umips -DLOADADDR=$(if $(LOADADDR),$(LOADADDR),0) -E -P -o $@ $(TOPDIR)/bin.lds.S 

bin64.lds: $(TOPDIR)/bin.lds.S
	$(CC) -Umips -DLOADADDR=$(if $(LOADADDR),$(LOADADDR),0) -E -P -o $@ $(TOPDIR)/bin64.lds.S

#VPATH += $(src)
ifdef BARCH
vpath %.c $(BARCH)
vpath %.S $(BARCH)
endif
ifdef src
vpath %.c $(src)
vpath %.S $(src)
endif

$(obj):
	mkdir -p $@
$(obj)/%.o %.o: %.S
	$(cmd_c_to_o)
$(obj)/%.o %.o: %.c
	$(cmd_c_to_i)
	$(cmd_c_to_o)
$(obj)/%.i %.i: %.c
	$(cmd_c_to_i)
$(obj)/%.i %.i: %.S
	$(cmd_c_to_i)
$(obj)/%.i64 %.i64: %.c
	$(cmd_c_to_i64)
$(obj)/%.i64 %.i64: %.S
	$(cmd_c_to_i64)
$(obj)/%.o64 %.o64: %.S
	$(cmd_c_to_o64)
$(obj)/%.o64 %.o64: %.c
	$(cmd_c_to_i64)
	$(cmd_c_to_o64)
$(obj)/%.s %.s: %.S
	$(cmd_c_to_s)
$(obj)/%.s %.s: %.c
	$(cmd_c_to_s)
$(obj)/%.s64 %.s64: %.S
	$(cmd_c_to_s64)
$(obj)/%.s64 %.s64: %.c
	$(cmd_c_to_s64)
$(obj)/%.O %.O: %.S
	$(cmd_c_to_O)
$(obj)/%.O %.O: %.c
	$(cmd_c_to_O)
$(obj)/%.O64 %.O64: %.S
	$(cmd_c_to_O64)
$(obj)/%.O64 %.O64: %.c
	$(cmd_c_to_O64)

objs64=$(objs:.o=.o64)

objs32    := $(addprefix $(obj)/, $(objs))
objs64  := $(addprefix $(obj)/, $(objs64))

lib32=$(patsubst  %64.a,%.a,$(lib))
lib64=$(patsubst  %.a,%64.a,$(lib32))

$(lib32): $(objs32)
	$(cmd_ar)

$(lib64): $(objs64)
	$(cmd_ar)

FORCE: ;
